Day 6 
-----------------

Coding ninjas - https://www.codingninjas.com/codestudio
Coding ninjas DSA - https://classroom.codingninjas.com/app/login?redirect=%2Fapp%2Fclassroom%2Ffree-trial%2Fc-foundation-with-data-structures

Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - Â­1) ,
2.) If n is divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If n is divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  

# cook your dish here
def min_steps(n,l):
    if n==1: return 0
    if l[n]>0: return l[n]
    ans=1+min_steps(n-1,l)
    if n%2==0: ans=min(ans,1+min_steps(n//2,l))
    if n%3==0: ans=min(ans,1+min_steps(n//3,l))
    l[n]=ans
    return ans
n=10
l=[0]*(n+1)
print(min_steps(n,l))

Flip --> RKRRKKR
t=int(input())
for _ in range(t):
    s=input().strip()
    cr=0
    n=len(s)
    A=[0]*n
    for i in range(n):
        if s[i]=='R':
            A[i]=-1
            cr+=1 
        else: A[i]=1 
    if cr==n: print(n-1)
    else:   
        m=0 
        cm=0 
        for j in range(n):
            cm+=A[j]
            if cm<0: cm=0 
            if cm>m: m=cm 
        print(cr+m) 

Linked list - SLL
Part - 1
1. Sum of nodes
2. Count of nodes and check whether it is even or not
3. Reverse the SLL
4. Count prime nodes of SLL
5. Common nodes in two given SLL
Part - 2
6. Sum and product of nodes which is divisible by k
7. Count the number of occurences in SLL
8. Insert whole linked list in the kth position of 1st LL - merging
9. Remove dupliates from a sorted LL
Part - 3
10. Segregate even and odd nodes in a LL - even first and odd next (merging two seperate)
11. Pairwise swap elements of a given LL
12. Reverse alternate k nodes in a SLL
13. Rotate a LL for a k value of rotation
14. Sort a LL of 0s 1s and 2s
15. Find triplets from three LL and pick 1 element from each of same indices and unique with sum equals to the k value
16. Delete N nodes after M nodes of a LL
17. Make middle node as head

