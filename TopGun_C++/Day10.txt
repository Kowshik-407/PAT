DAY 10 
---------------------
Codechef - https://www.codechef.com/
Codechef Practice Problems - https://www.codechef.com/problems/school/
DSA Series - https://www.codechef.com/LEARNDSA/?itm_medium=navmenu&itm_campaign=learndsa
CodeChef UTube Channel - https://www.youtube.com/channel/UCh-5M0r0SBgb5xNCFXG7aXQ/featured






To be faster to compute cin and cout ::> We can use 2 lines of code 

ios_base::sync_with_stdio(false);
cin.tie(NULL);

Get these two lines in main method.

C++ STL --> Standard Template Library - It is a set of C++ template classes
It has 4 components - 
1. Algorithms
2. Containers
3. Functions
4. Iterators

Algorithms - 
The header algorithm defines a collection of functions especially designed to be used on ranges of elements.
- sorting
- searching
 - max_element(v.begin(),v.end()); --> For sets, vectors, maps
 - min_element(v.begin(),v.end()); --> For sets, vectors, maps

Containers - 
Containers or container classes store objects and data. There are in total seven standard "first-class" container classes and three container adaptors and only seven header files
1. Sequence Containers - Implement data structures which can be accessed in a sequential manner 
 - vector 
 - list
 - deque
 - arrays 
 - forward list
2. Container adaptors - Provide a different interface for sequential containers
 - queue
 - priority queue
 - stack 
3. Associative Containers - implement sorted data structures that can be quickly searched (O(log n) complexity)
 - set
 - multiset
 - map
 - multimap
4. Unordered Associative Containers - implement unordered data structures that can be quickly searched 
 - unordered_set
 - unordered_multiset
 - unordered_map
 - unordered_multimap

3. Functions - The STL includes classes that overload the function call operator. Instances of such classes are called function objects or functors.
 - functors

4. Iterators - Iterators are used for working upon a sequence of values 
 - iterators


vector--> iterators 

#include <bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	vector<int> v={1,2,3};
	vector<int>::iterator it;
	vector<int>::reverse_iterator er;
	for(it=v.begin();it!=v.end();it++){
	    int num=*it;
	    cout<<num<<' ';
	}
	cout<<endl;
	for(it=v.end()-1;it>=v.begin();it--){
	    int k=*it;
	    cout<<k<<' ';
	}
	cout<<endl;
	for(er=v.rbegin();er!=v.rend();er++){
	    int l=*er;
	    cout<<l<<' ';
	}
	cout<<endl;
	for(er=v.rend()-1;er>=v.rbegin();er--){
	    int m=*er;
	    cout<<m<<' ';
	}
	return 0;
}

Op:: 
1 2 3 
3 2 1 
3 2 1 
1 2 3 


Maps - It is used to store a key -> value pair 
EX::> Kowshik - 407 ::> key - pair

Map Definition --> map<int, int> gmap1;
Insertion -
gmap1.insert(pair<int, int>(1,40));

EX:: To print the map values of KOWSHIK each char and bool value.
#include <bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	map<char, bool> kk;
    string s = "KOWSHIK";
    for(int i=0;i<s.length();i++){
        char ch=s[i];
        kk[ch]=true;
    }
    map<char, bool>::iterator it;
    for(it=kk.begin();it!=kk.end();it++){
        cout<<' '<<it->first<<' '<<it->second<<endl;
    }
	return 0;
}

Copying of one map to another map - 
map<int, int> jk(kk.begin(), kk.end());
for(it=jk.begin();it!=jk.end();it++) cout<<' '<<it->first<<' '<<it->second<<endl;

Deletion - 
map<int, int> kk;
kk.insert(pair<int, int>(1,2));
kk.insert(pair<int, int>(1,3));
kk.insert(pair<int, int>(2,4));
kk.insert(pair<int, int>(2,5));
kk.insert(pair<int, int>(3,6));
kk.insert(pair<int, int>(3,8));
kk.insert(pair<int, int>(4,9));
kk.insert(pair<int, int>(4,10));

//Remove all elements upto key=3
jk.erase(jk.begin(), jk.find(3));
for(it=jk.begin();it!=jk.end();it++) cout<<' '<<it->first<<' '<<it->second<<endl;

// Remove element with key=3
int num = jk.erase(3);
for(it=jk.begin();it!=jk.end();it++) cout <<' '<<it->first<<' '<<it->second<<endl;

// Lower bound and upper bound
cout<<kk.lower_bound(4)->first<<'\t';
cout<<kk.lower_bound(4)->second<<'\t';


Sets - These are a type of associative containers
set<int> st;
 - Set stores only unique keys. But no values
 - insert, delete elements in O(log n)
 - set is always sorted.

Insertion - st.insert(key);
st.insert(1);
st.insert(2);
st.insert(3);

Deletion - st.erase(key);
int it = mp.find(key);
mp.erase(it);


#include<bits/stdc++.h>
#include<map>
using namespace std;
int main(){
	set<char>st;
	string s = "kowshik";
	for(int i=0;i<s.size();i++) st.insert(s[i]);
	for(auto it=st.begin();it!=st.end();it++) cout<<*it<<endl;
}

pb/m --> How many natural numbers divide atleast 1 of the numbers? 	10, 66, 104, 117, 95, 29, 1043

#include<bits/stdc++.h>
#include<map>
using namespace std;
int main(){
    set<int>st;
	int a[7]={10,66,104,117,95,29,1043};
	for(int i=1;i<=1043;i++){
	    for(int j=0;j<7;j++){
	        if(a[j]%i==0){
	            st.insert(i);
	        }
	    }
	}
	for(auto it=st.begin();it!=st.end();it++) cout<<*it<<' ';
	cout<<endl;
	cout<<"Total number of elements : "<<st.size();
}

Op : 1 2 3 4 5 6 7 8 9 10 11 13 19 22 26 29 33 39 52 66 95 104 117 149 1043 
Total number of elements : 25


Bounds - 
Lower bound - lower_bound(num)
Least index,
ith element of container is >= num;

Upper bound - upper_bound(num)
Least index is t
ith element of container is > num;

EX:: Array - 1 2 2 3 5
lowerbound(2): 1 2 2 3 5 --> 2
lowerbound(4): 1 2 2 3 5 --> 5

upperbound(2): 1 2 2 3 5 --> 3
upperbound(4): 1 2 2 3 5 --> 5

For both lower bound and upper bound has O(log n)

v = {1,2,3,5,7,10} 
val = lowerbound(key);
if(val==key)
vector<int>::iterator it;
it = lowerbound(11);

vector<int>ct;
set<int>ct;
map<int, int>ct;
anyone from above.
it = ct.lowerbound(key);

#include<bits/stdc++.h>
#include<map>
using namespace std;
int main(){
    vector<int>v={1,2,3,4,5,8};
	int x = *lower_bound(v.begin(),v.end(),3);
	int y = *upper_bound(v.begin(),v.end(),3);
	cout<<x<<' '<<y<<endl;
}
Op: 3 4

Multisets - Multisets are a type of associative containers similar to set, with an exception that multiple elements can have same values. 

multiset <int, greater <int> > gquiz1;        
    gquiz1.insert(40);
    gquiz1.insert(30);
    gquiz1.insert(60);
    gquiz1.insert(20);
    gquiz1.insert(50);
    // 50 will be added again to 
    // the multiset unlike set
    gquiz1.insert(50); 
    gquiz1.insert(10);
Op: 
The multiset gquiz1 is : 
60 50 50 40 30 20 10

Deletion - gquiz1.erase(gquiz1.begin(),gquiz.find(30));
Count    - cout<<gquiz1.count(10)<<endl;

Problems - 
1. Duplicate Zeros - 1089
2. Contains Duplicate - 217
3. First Unique Character in a string - 387
4. Monk and his friends - Hackerearth
5. The monk and class marks - Hackerearth
6. Move Zeros - 283

Sets - 
1. Monk's Birthday Party - Hackerearth
2. Maximum in Subarray  - Hackerearth --> Important problem have a look in sliding window mechanism