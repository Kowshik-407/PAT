DAY 8 
---------------
Practice in this website - https://www.interviewbit.com/
CodeForces - https://codeforces.com/problemset?order=BY_SOLVED_DESC

LINEAR DATA STRUCTURES - Sequential 
- Arrays
- Stacks
- Queues
- Linked Lists

Sorted array using two pointers - 
#include<bits/stdc++.h>
using namespace std;
int main(){
    int nums1[4]={1,3,4,4};
    int nums2[4]={2,5,7,8};
    int m=4,n=4;
    int a[m+n];
    int i=0,j=0,k=0;
    while(i<m && j<n)
    {
        if(nums1[i]<nums2[j]) a[k++]=nums1[i++];
        else a[k++]=nums2[j++];
    }
    while(i<m) a[k++]=nums1[i++];
    while(j<n) a[k++]=nums2[j++];
    for(int i=0;i<m+n;i++) cout<<a[i]<<' ';
}
Op: 1 2 3 4 4 5 7 8

Maximum Subarray Sum - Kadane's Algorithm
In the size of array is n ::> The total number of subarrays can be n(n+1)/2

int largestSum(arr,n){
max_so_far=INT_MIN;
max_ending_here=0;
for(int i=0;i<n;i++){
max_ending_here+=arr[i];
if max_so_far < max_ending_here max_so_far=max_ending_here;
if max_ending_here<0 max_ending_here=0;
}
}

Arrays - Elements are stored continuously in physical memory
Problems - 
1. Merge Sorted Array - 88
2. Intersection of two arrays 2 - 350

Arrays Disadvantages - 
1. Size is fixed
2. You cannot delete/shift elements 
To overcome this we are moving to linkedlists.


Linkedlists - Stores more memory and sequential but not in physical
The address of next memory cannot be determined. Here they are not continous memory
SLL - 
struct node
{
	int data; // Data
	struct node *next; // Pointer
}

int main(){

// Allocate 3 pointers
struct node *head = NULL;
struct node *second=NULL;
struct node *third= NULL;

//Allocate 3 nodes
head = new node; // new is the keyword
second = new node;
third = new node;

head->data = 1; // Assign data in first node
head->next = second; // Link first node with the second node

second-> data = 2;
second->next = third;

third->data = 3;
third->next = NULL;

struct node *temp = head;
while(temp!=NULL){
cout<<temp->data;
temp=temp->next;
} 
}

To add nodes in a linkedlist or empty LL
Node *addNode(int num, Node *head){
struct Node *currNode;
currNode = new Node;
currNode->data = num;
currNode->next = NULL;
if(head==NULL) return currNode
else{
Node *temp = head;
while(temp->next!=NULL){
temp=temp->next;
}
temp->next = currNode;
return head;
}
}

int main(){
addNode(10);
addNode(20);
addNode(30);
}

Op ::> 10->20->30

Try to do with deleteNode(int num,Node *head){ }

Problems - 
1. Merge two sorted lists - 21
2. Remove nth node from end of list - 19

Stack - FILO or LIFO
STL --> 
stack <int>s;
s.push();
s.pop();
s.top();
s.size();

Stack using LL:
struct StackNode *newNode(int data)
{
struct StackNode *stackNode = new StackNode;
stackNode->data = data;
stackNode->next = NULL;
return stackNode;
}

// Function to check if stack is empty
int isEmpty(struct StackNode *root) return !root;

// Function to pop an element from stack
StackNode *pop(head)
{
if(head==NULL) return "Error";
if(head->next==NULL) return NULL;
else return head->next;

Stack Problems - 
1. Min Stack - 155
2. Valid Parantheses - 20

Queues - FIFO and LILO
Given an array of integers, find the nearest smalledst number for every element such that the smaller element is on left side. if no smaller element present on the left print -1

Ip:
2 // Number of test cases
3 // Array size
1 6 2
6 
1 5 0 3 4 5
Op:
-1 1 1
-1 1 -1 0 3 4

Try this pb/m using stack